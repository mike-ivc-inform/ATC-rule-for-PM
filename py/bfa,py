class WeightedGraph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.edges = []

    def add_edge(self, u, v, weight):
        self.edges.append((u, v, weight))

    def bellman_ford(self, source):
        # Step 1: Initialization
        dist = {vertex: float('inf') for vertex in self.vertices}
        dist[source] = 0

        # Step 2: Relaxation
        for _ in range(len(self.vertices) - 1):
            for u, v, weight in self.edges:
                if dist[u] + weight < dist[v]:
                    dist[v] = dist[u] + weight

        # Step 3: Negative Cycle Detection
        for u, v, weight in self.edges:
            if dist[u] + weight < dist[v]:
                print("Graph contains negative cycle!")
                return None

        return dist


# Example usage:
if __name__ == "__main__":
    vertices = ["A", "B", "C"]
    graph = WeightedGraph(vertices)
    graph.add_edge("A", "B", 5)
    graph.add_edge("B", "C", -3)
    graph.add_edge("C", "A", 2)

    source = "A"
    shortest_distances = graph.bellman_ford(source)
    if shortest_distances:
        print("Shortest distances from source node:")
        for vertex, distance in shortest_distances.items():
            print(f"Distance to {vertex}: {distance}")
